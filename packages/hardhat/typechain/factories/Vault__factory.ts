/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Vault, VaultInterface } from "../Vault";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "tokenAddress",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "Deposite",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "Withdraw",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "deposite",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "getOwnerDepositAmount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getTotalAmount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "withdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50604051610be8380380610be883398181016040528101906100329190610096565b600160008190555080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050610108565b600081519050610090816100f1565b92915050565b6000602082840312156100a857600080fd5b60006100b684828501610081565b91505092915050565b60006100ca826100d1565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6100fa816100bf565b811461010557600080fd5b50565b610ad1806101176000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80632e1a7d4d146100515780633104562b1461006d5780635e0179ff1461008957806365ac4341146100b9575b600080fd5b61006b6004803603810190610066919061068e565b6100d7565b005b6100876004803603810190610082919061068e565b61031b565b005b6100a3600480360381019061009e919061063c565b610526565b6040516100b09190610885565b60405180910390f35b6100c16105de565b6040516100ce9190610885565b60405180910390f35b6002600054141561011d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161011490610865565b60405180910390fd5b600260008190555080600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b8152600401610181919061078a565b60206040518083038186803b15801561019957600080fd5b505afa1580156101ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101d191906106b7565b1015610212576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161020990610805565b60405180910390fd5b80600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546102619190610907565b92505081905550806003600082825461027a9190610907565b92505081905550600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f3fef3a333836040518363ffffffff1660e01b81526004016102de9291906107dc565b600060405180830381600087803b1580156102f857600080fd5b505af115801561030c573d6000803e3d6000fd5b50505050600160008190555050565b60026000541415610361576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161035890610865565b60405180910390fd5b6002600081905550600081116103ac576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103a390610825565b60405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330846040518463ffffffff1660e01b815260040161040b939291906107a5565b602060405180830381600087803b15801561042557600080fd5b505af1158015610439573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061045d9190610665565b5080600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546104ad91906108b1565b9250508190555080600360008282546104c691906108b1565b925050819055503373ffffffffffffffffffffffffffffffffffffffff167f67d0e209d76ed24370106b1fd0fc1c82de411f7b72ba3d92736b75fe4add443a826040516105139190610885565b60405180910390a2600160008190555050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610597576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161058e90610845565b60405180910390fd5b600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000600354905090565b6000813590506105f781610a56565b92915050565b60008151905061060c81610a6d565b92915050565b60008135905061062181610a84565b92915050565b60008151905061063681610a84565b92915050565b60006020828403121561064e57600080fd5b600061065c848285016105e8565b91505092915050565b60006020828403121561067757600080fd5b6000610685848285016105fd565b91505092915050565b6000602082840312156106a057600080fd5b60006106ae84828501610612565b91505092915050565b6000602082840312156106c957600080fd5b60006106d784828501610627565b91505092915050565b6106e98161093b565b82525050565b60006106fc6012836108a0565b9150610707826109b2565b602082019050919050565b600061071f6018836108a0565b915061072a826109db565b602082019050919050565b60006107426010836108a0565b915061074d82610a04565b602082019050919050565b6000610765601f836108a0565b915061077082610a2d565b602082019050919050565b61078481610979565b82525050565b600060208201905061079f60008301846106e0565b92915050565b60006060820190506107ba60008301866106e0565b6107c760208301856106e0565b6107d4604083018461077b565b949350505050565b60006040820190506107f160008301856106e0565b6107fe602083018461077b565b9392505050565b6000602082019050818103600083015261081e816106ef565b9050919050565b6000602082019050818103600083015261083e81610712565b9050919050565b6000602082019050818103600083015261085e81610735565b9050919050565b6000602082019050818103600083015261087e81610758565b9050919050565b600060208201905061089a600083018461077b565b92915050565b600082825260208201905092915050565b60006108bc82610979565b91506108c783610979565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156108fc576108fb610983565b5b828201905092915050565b600061091282610979565b915061091d83610979565b9250828210156109305761092f610983565b5b828203905092915050565b600061094682610959565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f6e6f7420656e6f7567682062616c616e63650000000000000000000000000000600082015250565b7f6465706f7369746520616d6f756e74206e6f74207a6f72650000000000000000600082015250565b7f6163636f756e74206e6f74207a65726f00000000000000000000000000000000600082015250565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b610a5f8161093b565b8114610a6a57600080fd5b50565b610a768161094d565b8114610a8157600080fd5b50565b610a8d81610979565b8114610a9857600080fd5b5056fea2646970667358221220159c04c0cd2734940f2707a136d513c67e63f08cbc627c352618a46794d852cc64736f6c63430008040033";

export class Vault__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    tokenAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Vault> {
    return super.deploy(tokenAddress, overrides || {}) as Promise<Vault>;
  }
  getDeployTransaction(
    tokenAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(tokenAddress, overrides || {});
  }
  attach(address: string): Vault {
    return super.attach(address) as Vault;
  }
  connect(signer: Signer): Vault__factory {
    return super.connect(signer) as Vault__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): VaultInterface {
    return new utils.Interface(_abi) as VaultInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Vault {
    return new Contract(address, _abi, signerOrProvider) as Vault;
  }
}
