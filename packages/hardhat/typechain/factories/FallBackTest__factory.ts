/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { FallBackTest, FallBackTestInterface } from "../FallBackTest";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "x",
        type: "uint256",
      },
    ],
    name: "FallBack",
    type: "event",
  },
  {
    stateMutability: "payable",
    type: "fallback",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610150806100206000396000f3fe60c0604052600d60809081526c63616c6c2066616c6c6261636b60981b60a0526100289061005e565b604051600181527fffd2cb0171fe59512774ac2bde08b563d8fef63dd529b9d3efde838cfbb467459060200160405180910390a1005b6100a18160405160240161007291906100c5565b60408051601f198184030181529190526020810180516001600160e01b031663104c13eb60e21b1790526100a4565b50565b80516a636f6e736f6c652e6c6f67602083016000808483855afa5050505050565b600060208083528351808285015260005b818110156100f2578581018301518582016040015282016100d6565b81811115610104576000604083870101525b50601f01601f191692909201604001939250505056fea264697066735822122008338ac4783727f7eb272264f9058fa71d2225ae9abeac7eed4f036d18352fc964736f6c63430008090033";

export class FallBackTest__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<FallBackTest> {
    return super.deploy(overrides || {}) as Promise<FallBackTest>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): FallBackTest {
    return super.attach(address) as FallBackTest;
  }
  connect(signer: Signer): FallBackTest__factory {
    return super.connect(signer) as FallBackTest__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): FallBackTestInterface {
    return new utils.Interface(_abi) as FallBackTestInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): FallBackTest {
    return new Contract(address, _abi, signerOrProvider) as FallBackTest;
  }
}
